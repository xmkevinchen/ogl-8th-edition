#version 330

layout (location = 0) in vec4 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec4 color;

uniform mat4 view_matrix;
uniform mat4 projection_matrix;

uniform samplerBuffer color_texture_buffer_objects;
uniform samplerBuffer model_matrix_texture_buffer_objects;

out VERTEX {
    vec3    normal;
    vec4    color;
} vertex;

void main(void) {
    
    vec4 color = texelFetch(color_texture_buffer_objects, gl_InstanceID);
    
    /**
     *  Genereating the model matrix is more complex 
     *  because you can't store mat4 data in a texture buffer objects.
     *  Instead, we need to store each matrix as four vec4 variables 
     *  and assemble the matrix in the shader.
     *  First, fetch the four columns of the matrix (remember, matrices are stored 
     *  in memory in column-primary order).
     */
    vec4 col1 = texelFetch(model_matrix_texture_buffer_objects, gl_InstanceID * 4);
    vec4 col2 = texelFetch(model_matrix_texture_buffer_objects, gl_InstanceID * 4 + 1);
    vec4 col3 = texelFetch(model_matrix_texture_buffer_objects, gl_InstanceID * 4 + 2);
    vec4 col4 = texelFetch(model_matrix_texture_buffer_objects, gl_InstanceID * 4 + 3);
    
    // Now assemble the four columns into a matrix.
    mat4 model_matrix = mat4(col1, col2, col3, col4);
    
    // Construct a model-view matrix from the uniform view matrix
    // and the per-instance model matrix.
    mat4 model_view_matrix = view_matrix * model_matrix;
    
    /**
     *  Transform position by the model-view matrix, then by the projection matrix.
     */
    gl_Position = projection_matrix * (model_view_matrix * position);
    
    /**
     *  Transform the noraml by the upper-left-3x3-submatrix of the model-view matrix
     */
    vertex.normal = mat3(model_view_matrix) * normal;
    
    // Pass the per-instance color through to to the fragment shader.
    vertex.color = color;
     
}